local map = vim.keymap.set
local wk = require("which-key")

map("n", "<C-e>", "<cmd>Neotree toggle<cr>", { desc = "Toggle Neotree" })
map("n", "<leader>L", "<cmd>Lazy<cr>", { desc = "Lazy" })

map("n", "<C-t>", "<cmd>lua Term_Toggle()<cr>", { desc = "Toggle Terminal" })

map('x', 'Y', '"*y')
map('x', 'P', '"*p')

wk.add({ "<leader>f", group = "Finder" })
map("n", "<leader>fb", "<cmd>FzfLua buffers<cr>", { desc = "Buffers" })
map("n", "<leader>fg", "<cmd>FzfLua grep<cr>", { desc = "Grep" })
map("n", "<leader>fG", "<cmd>FzfLua git_files<cr>", { desc = "Git Files" })
map("n", "<leader>ff", "<cmd>FzfLua files<cr>", { desc = "Files" })
map("n", "<leader>fr", "<cmd>FzfLua recent<cr>", { desc = "Recent" })
map("n", "<leader>fb", "<cmd>FzfLua buffers<cr>", { desc = "Buffers" })
map("n", "<leader>fa", "<cmd>FzfLua autocmds<cr>", { desc = "Autocmds" })
map("n", "<leader>fc", "<cmd>FzfLua command_history<cr>", { desc = "Command History" })
map("n", "<leader>fC", "<cmd>FzfLua commands<cr>", { desc = "Commands" })
map("n", "<leader>fh", "<cmd>FzfLua help<cr>", { desc = "Help" })
map("n", "<leader>fH", "<cmd>FzfLua highlights<cr>", { desc = "Highlights" })
map("n", "<leader>fk", "<cmd>FzfLua keymaps<cr>", { desc = "Keymaps" })
map("n", "<leader>fM", "<cmd>FzfLua manpages<cr>", { desc = "Manuals" })
map("n", "<leader>fm", "<cmd>FzfLua marks<cr>", { desc = "Marks" })

wk.add({ "<leader>l", group = "Lsp" })
map("n", "<leader>la", vim.lsp.buf.code_action, { desc = "Code Action" })
map("n", "<leader>lf", vim.lsp.buf.definition, { desc = "Definition" })
map("n", "<leader>lc", vim.lsp.buf.declaration, { desc = "Declaration" })
map("n", "<leader>lr", vim.lsp.buf.rename, { desc = "Rename" })
map("n", "<leader>lf", vim.lsp.buf.format, { desc = "Format" })

wk.add({ "<leader>g", group = "Git" })
map("n", "<leader>gg", "<cmd>lua Term_LazyGit_Toggle()<cr>", { desc = "LazyGit" })

wk.add({ "<leader>gb", group = "Blame" })
map("n", "<leader>gbt", "<cmd>GitBlameToggle<cr>", { desc = "Toggle Virtual Line" })

wk.add({ "<leader>gbo", group = "Open" })
map("n", "<leader>gboc", "<cmd>GitBlameOpenCommitURL<cr>", { desc = "Commit URL" })
map("n", "<leader>gbof", "<cmd>GitBlameOpenFileURL<cr>", { desc = "File URL" })

wk.add({ "<leader>gbc", group = "Copy" })
map("n", "<leader>gbcs", "<cmd>GitBlameCopySHA<cr>", { desc = "SHA" })
map("n", "<leader>gbcc", "<cmd>GitBlameCopyCommitURL<cr>", { desc = "Commit URL" })
map("n", "<leader>gbcf", "<cmd>GitBlameCopyFileURL<cr>", { desc = "File URL" })

local dapui = require("dapui")
wk.add({ "<leader>d", group = "Debugger" })
map("n", "<leader>dc", "<cmd>DapContinue<cr>", { desc = "Continue" })
map("n", "<leader>dd", "<cmd>DapDisconnect<cr>", { desc = "Disconnect" })
map("n", "<leader>de", dapui.eval, { desc = "Eval" })
map("n", "<leader>db", "<cmd>DapToggleBreakpoint<cr>", { desc = "Toggle Breakpoint" })
map("n", "<leader>dx", "<cmd>DapClearBreakpoints<cr>", { desc = "Clear Breakpoints" })
map("n", "<leader>dt", "<cmd>DapTerminate<cr>", { desc = "Terminate" })
wk.add({ "<leader>ds", group = "Step" })
map("n", "<leader>dsi", "<cmd>DapStepInto<cr>", { desc = "Step Into" })
map("n", "<leader>dso", "<cmd>DapStepOut<cr>", { desc = "Step Out" })
map("n", "<leader>dsO", "<cmd>DapStepOver<cr>", { desc = "Step Over" })
